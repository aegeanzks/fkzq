/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.kzgame.svrcli.msg.Ask_GuessingRecord', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Ask_GuessingRecord.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Ask_Login', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Ask_Login.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Ask_VirtualBet', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Ask_VirtualBet.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Ask_VirtualHistory', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Ask_VirtualHistory.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.GoalAndBetArea', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.GuessingRecord', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.MatchInfo', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Push_GoalAndBetArea', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Push_GoalAndBetArea.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Push_MatchInfo', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Push_MatchInfo.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Res_GuessingRecord', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Res_GuessingRecord.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Res_Login', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Res_Login.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Res_VirtualBet', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Res_VirtualBet.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Res_VirtualHistory', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.Res_VirtualHistory.Type', null, global);
goog.exportSymbol('proto.kzgame.svrcli.msg.VirtualHistory', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Ask_Login = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Ask_Login, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Ask_Login.displayName = 'proto.kzgame.svrcli.msg.Ask_Login';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Ask_Login.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Ask_Login.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Ask_Login} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Ask_Login.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Ask_Login}
 */
proto.kzgame.svrcli.msg.Ask_Login.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Ask_Login;
  return proto.kzgame.svrcli.msg.Ask_Login.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Ask_Login} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Ask_Login}
 */
proto.kzgame.svrcli.msg.Ask_Login.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Ask_Login} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Ask_Login.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Ask_Login.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Ask_Login.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Ask_Login} The clone.
 */
proto.kzgame.svrcli.msg.Ask_Login.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Ask_Login} */ (jspb.Message.cloneMessage(this));
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Ask_Login.Type = {
  UNSET: 0,
  ID: 10000
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Res_Login = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Res_Login, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Res_Login.displayName = 'proto.kzgame.svrcli.msg.Res_Login';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Res_Login.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Res_Login.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Res_Login} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Res_Login.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: msg.getResult(),
    coin: msg.getCoin()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Res_Login}
 */
proto.kzgame.svrcli.msg.Res_Login.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Res_Login;
  return proto.kzgame.svrcli.msg.Res_Login.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Res_Login} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Res_Login}
 */
proto.kzgame.svrcli.msg.Res_Login.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Res_Login} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Res_Login.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Res_Login.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Res_Login.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getCoin();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Res_Login} The clone.
 */
proto.kzgame.svrcli.msg.Res_Login.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Res_Login} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 result = 1;
 * @return {number}
 */
proto.kzgame.svrcli.msg.Res_Login.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.Res_Login.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double coin = 2;
 * @return {number}
 */
proto.kzgame.svrcli.msg.Res_Login.prototype.getCoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.Res_Login.prototype.setCoin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Res_Login.Type = {
  UNSET: 0,
  ID: 10001
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.displayName = 'proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo}
 */
proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo;
  return proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo}
 */
proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo} The clone.
 */
proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Ask_VirtualFootMainInfo.Type = {
  UNSET: 0,
  ID: 20000
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.MatchInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.MatchInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.MatchInfo.displayName = 'proto.kzgame.svrcli.msg.MatchInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.MatchInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.MatchInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.MatchInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.MatchInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchstate: msg.getMatchstate(),
    lastsecond: msg.getLastsecond(),
    hostwinnum: msg.getHostwinnum(),
    drawnum: msg.getDrawnum(),
    guestwinnum: msg.getGuestwinnum()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.MatchInfo}
 */
proto.kzgame.svrcli.msg.MatchInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.MatchInfo;
  return proto.kzgame.svrcli.msg.MatchInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.MatchInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.MatchInfo}
 */
proto.kzgame.svrcli.msg.MatchInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMatchstate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLastsecond(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostwinnum(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDrawnum(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuestwinnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.MatchInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.MatchInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.MatchInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.MatchInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMatchstate();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getLastsecond();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getHostwinnum();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getDrawnum();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getGuestwinnum();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.MatchInfo} The clone.
 */
proto.kzgame.svrcli.msg.MatchInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.MatchInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 matchState = 1;
 * @return {number}
 */
proto.kzgame.svrcli.msg.MatchInfo.prototype.getMatchstate = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.MatchInfo.prototype.setMatchstate = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 lastSecond = 2;
 * @return {number}
 */
proto.kzgame.svrcli.msg.MatchInfo.prototype.getLastsecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.MatchInfo.prototype.setLastsecond = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 hostWinNum = 3;
 * @return {number}
 */
proto.kzgame.svrcli.msg.MatchInfo.prototype.getHostwinnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.MatchInfo.prototype.setHostwinnum = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 drawNum = 4;
 * @return {number}
 */
proto.kzgame.svrcli.msg.MatchInfo.prototype.getDrawnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.MatchInfo.prototype.setDrawnum = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 guestWinNum = 5;
 * @return {number}
 */
proto.kzgame.svrcli.msg.MatchInfo.prototype.getGuestwinnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.MatchInfo.prototype.setGuestwinnum = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.GoalAndBetArea = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.GoalAndBetArea, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.GoalAndBetArea.displayName = 'proto.kzgame.svrcli.msg.GoalAndBetArea';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.GoalAndBetArea.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.GoalAndBetArea} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.toObject = function(includeInstance, msg) {
  var f, obj = {
    hostteamid: msg.getHostteamid(),
    hostteamgoal: msg.getHostteamgoal(),
    guestteamid: msg.getGuestteamid(),
    guestteamgoal: msg.getGuestteamgoal(),
    hostwintimes: msg.getHostwintimes(),
    hostwinsupport: msg.getHostwinsupport(),
    drawtimes: msg.getDrawtimes(),
    drawsupport: msg.getDrawsupport(),
    guestwintimes: msg.getGuestwintimes(),
    guestwinsupport: msg.getGuestwinsupport(),
    hostnextgoaltimes: msg.getHostnextgoaltimes(),
    hostnextgoalsupport: msg.getHostnextgoalsupport(),
    zerogoaltimes: msg.getZerogoaltimes(),
    zerogoalsupport: msg.getZerogoalsupport(),
    guestnextgoaltimes: msg.getGuestnextgoaltimes(),
    guestnextgoalsupport: msg.getGuestnextgoalsupport(),
    event: msg.getEvent()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.GoalAndBetArea}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.GoalAndBetArea;
  return proto.kzgame.svrcli.msg.GoalAndBetArea.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.GoalAndBetArea} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.GoalAndBetArea}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostteamid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostteamgoal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuestteamid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuestteamgoal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHostwintimes(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostwinsupport(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDrawtimes(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDrawsupport(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGuestwintimes(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuestwinsupport(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHostnextgoaltimes(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostnextgoalsupport(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZerogoaltimes(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZerogoalsupport(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGuestnextgoaltimes(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGuestnextgoalsupport(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.GoalAndBetArea} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHostteamid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getHostteamgoal();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getGuestteamid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getGuestteamgoal();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getHostwintimes();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = this.getHostwinsupport();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getDrawtimes();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = this.getDrawsupport();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = this.getGuestwintimes();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = this.getGuestwinsupport();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = this.getHostnextgoaltimes();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = this.getHostnextgoalsupport();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = this.getZerogoaltimes();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = this.getZerogoalsupport();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = this.getGuestnextgoaltimes();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = this.getGuestnextgoalsupport();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = this.getEvent();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.GoalAndBetArea} The clone.
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.GoalAndBetArea} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 hostTeamId = 1;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getHostteamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setHostteamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 hostTeamGoal = 2;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getHostteamgoal = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setHostteamgoal = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 guestTeamId = 3;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getGuestteamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setGuestteamid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 guestTeamGoal = 4;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getGuestteamgoal = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setGuestteamgoal = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float hostWinTimes = 5;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getHostwintimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setHostwintimes = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 hostWinSupport = 6;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getHostwinsupport = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setHostwinsupport = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional float drawTimes = 7;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getDrawtimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setDrawtimes = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 drawSupport = 8;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getDrawsupport = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setDrawsupport = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional float guestWinTimes = 9;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getGuestwintimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setGuestwintimes = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional int32 guestWinSupport = 10;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getGuestwinsupport = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setGuestwinsupport = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional float hostNextGoalTimes = 11;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getHostnextgoaltimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setHostnextgoaltimes = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional int32 hostNextGoalSupport = 12;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getHostnextgoalsupport = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setHostnextgoalsupport = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional float zeroGoalTimes = 13;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getZerogoaltimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 13, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setZerogoaltimes = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional int32 zeroGoalSupport = 14;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getZerogoalsupport = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 14, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setZerogoalsupport = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional float guestNextGoalTimes = 15;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getGuestnextgoaltimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 15, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setGuestnextgoaltimes = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional float guestNextGoalSupport = 16;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getGuestnextgoalsupport = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 16, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setGuestnextgoalsupport = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional int32 event = 17;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.getEvent = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 17, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GoalAndBetArea.prototype.setEvent = function(value) {
  jspb.Message.setField(this, 17, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.displayName = 'proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchinfo: (f = msg.getMatchinfo()) && proto.kzgame.svrcli.msg.MatchInfo.toObject(includeInstance, f),
    goalandbetarea: (f = msg.getGoalandbetarea()) && proto.kzgame.svrcli.msg.GoalAndBetArea.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo}
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo;
  return proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo}
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kzgame.svrcli.msg.MatchInfo;
      reader.readMessage(value,proto.kzgame.svrcli.msg.MatchInfo.deserializeBinaryFromReader);
      msg.setMatchinfo(value);
      break;
    case 2:
      var value = new proto.kzgame.svrcli.msg.GoalAndBetArea;
      reader.readMessage(value,proto.kzgame.svrcli.msg.GoalAndBetArea.deserializeBinaryFromReader);
      msg.setGoalandbetarea(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMatchinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.kzgame.svrcli.msg.MatchInfo.serializeBinaryToWriter
    );
  }
  f = this.getGoalandbetarea();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.kzgame.svrcli.msg.GoalAndBetArea.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo} The clone.
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional MatchInfo matchInfo = 1;
 * @return {proto.kzgame.svrcli.msg.MatchInfo}
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.getMatchinfo = function() {
  return /** @type{proto.kzgame.svrcli.msg.MatchInfo} */ (
    jspb.Message.getWrapperField(this, proto.kzgame.svrcli.msg.MatchInfo, 1));
};


/** @param {proto.kzgame.svrcli.msg.MatchInfo|undefined} value  */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.setMatchinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.clearMatchinfo = function() {
  this.setMatchinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.hasMatchinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GoalAndBetArea goalAndBetArea = 2;
 * @return {proto.kzgame.svrcli.msg.GoalAndBetArea}
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.getGoalandbetarea = function() {
  return /** @type{proto.kzgame.svrcli.msg.GoalAndBetArea} */ (
    jspb.Message.getWrapperField(this, proto.kzgame.svrcli.msg.GoalAndBetArea, 2));
};


/** @param {proto.kzgame.svrcli.msg.GoalAndBetArea|undefined} value  */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.setGoalandbetarea = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.clearGoalandbetarea = function() {
  this.setGoalandbetarea(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.prototype.hasGoalandbetarea = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Res_VirtualFootMainInfo.Type = {
  UNSET: 0,
  ID: 20001
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Push_MatchInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Push_MatchInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Push_MatchInfo.displayName = 'proto.kzgame.svrcli.msg.Push_MatchInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Push_MatchInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Push_MatchInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Push_MatchInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Push_MatchInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    matchinfo: (f = msg.getMatchinfo()) && proto.kzgame.svrcli.msg.MatchInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Push_MatchInfo}
 */
proto.kzgame.svrcli.msg.Push_MatchInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Push_MatchInfo;
  return proto.kzgame.svrcli.msg.Push_MatchInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Push_MatchInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Push_MatchInfo}
 */
proto.kzgame.svrcli.msg.Push_MatchInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kzgame.svrcli.msg.MatchInfo;
      reader.readMessage(value,proto.kzgame.svrcli.msg.MatchInfo.deserializeBinaryFromReader);
      msg.setMatchinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Push_MatchInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Push_MatchInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Push_MatchInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Push_MatchInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMatchinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.kzgame.svrcli.msg.MatchInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Push_MatchInfo} The clone.
 */
proto.kzgame.svrcli.msg.Push_MatchInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Push_MatchInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional MatchInfo matchInfo = 1;
 * @return {proto.kzgame.svrcli.msg.MatchInfo}
 */
proto.kzgame.svrcli.msg.Push_MatchInfo.prototype.getMatchinfo = function() {
  return /** @type{proto.kzgame.svrcli.msg.MatchInfo} */ (
    jspb.Message.getWrapperField(this, proto.kzgame.svrcli.msg.MatchInfo, 1));
};


/** @param {proto.kzgame.svrcli.msg.MatchInfo|undefined} value  */
proto.kzgame.svrcli.msg.Push_MatchInfo.prototype.setMatchinfo = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.kzgame.svrcli.msg.Push_MatchInfo.prototype.clearMatchinfo = function() {
  this.setMatchinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.kzgame.svrcli.msg.Push_MatchInfo.prototype.hasMatchinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Push_MatchInfo.Type = {
  UNSET: 0,
  ID: 20002
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Push_GoalAndBetArea, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Push_GoalAndBetArea.displayName = 'proto.kzgame.svrcli.msg.Push_GoalAndBetArea';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Push_GoalAndBetArea.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Push_GoalAndBetArea} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.toObject = function(includeInstance, msg) {
  var f, obj = {
    goalandbetarea: (f = msg.getGoalandbetarea()) && proto.kzgame.svrcli.msg.GoalAndBetArea.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Push_GoalAndBetArea}
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Push_GoalAndBetArea;
  return proto.kzgame.svrcli.msg.Push_GoalAndBetArea.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Push_GoalAndBetArea} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Push_GoalAndBetArea}
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kzgame.svrcli.msg.GoalAndBetArea;
      reader.readMessage(value,proto.kzgame.svrcli.msg.GoalAndBetArea.deserializeBinaryFromReader);
      msg.setGoalandbetarea(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Push_GoalAndBetArea} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGoalandbetarea();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.kzgame.svrcli.msg.GoalAndBetArea.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Push_GoalAndBetArea} The clone.
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Push_GoalAndBetArea} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional GoalAndBetArea goalAndBetArea = 1;
 * @return {proto.kzgame.svrcli.msg.GoalAndBetArea}
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.prototype.getGoalandbetarea = function() {
  return /** @type{proto.kzgame.svrcli.msg.GoalAndBetArea} */ (
    jspb.Message.getWrapperField(this, proto.kzgame.svrcli.msg.GoalAndBetArea, 1));
};


/** @param {proto.kzgame.svrcli.msg.GoalAndBetArea|undefined} value  */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.prototype.setGoalandbetarea = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.kzgame.svrcli.msg.Push_GoalAndBetArea.prototype.clearGoalandbetarea = function() {
  this.setGoalandbetarea(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.prototype.hasGoalandbetarea = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Push_GoalAndBetArea.Type = {
  UNSET: 0,
  ID: 20003
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Ask_GuessingRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Ask_GuessingRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Ask_GuessingRecord.displayName = 'proto.kzgame.svrcli.msg.Ask_GuessingRecord';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Ask_GuessingRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Ask_GuessingRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Ask_GuessingRecord} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Ask_GuessingRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: msg.getPage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Ask_GuessingRecord}
 */
proto.kzgame.svrcli.msg.Ask_GuessingRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Ask_GuessingRecord;
  return proto.kzgame.svrcli.msg.Ask_GuessingRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Ask_GuessingRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Ask_GuessingRecord}
 */
proto.kzgame.svrcli.msg.Ask_GuessingRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Ask_GuessingRecord} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Ask_GuessingRecord.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Ask_GuessingRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Ask_GuessingRecord.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Ask_GuessingRecord} The clone.
 */
proto.kzgame.svrcli.msg.Ask_GuessingRecord.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Ask_GuessingRecord} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.kzgame.svrcli.msg.Ask_GuessingRecord.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.Ask_GuessingRecord.prototype.setPage = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Ask_GuessingRecord.Type = {
  UNSET: 0,
  ID: 20004
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.GuessingRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.GuessingRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.GuessingRecord.displayName = 'proto.kzgame.svrcli.msg.GuessingRecord';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.GuessingRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.GuessingRecord} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.GuessingRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    issue: msg.getIssue(),
    hostteamid: msg.getHostteamid(),
    guestteamid: msg.getGuestteamid(),
    betdate: msg.getBetdate(),
    betarea: msg.getBetarea(),
    bettimes: msg.getBettimes(),
    betcoin: msg.getBetcoin(),
    getcoin: msg.getGetcoin()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.GuessingRecord}
 */
proto.kzgame.svrcli.msg.GuessingRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.GuessingRecord;
  return proto.kzgame.svrcli.msg.GuessingRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.GuessingRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.GuessingRecord}
 */
proto.kzgame.svrcli.msg.GuessingRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostteamid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuestteamid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBetdate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBetarea(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBettimes(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBetcoin(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGetcoin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.GuessingRecord} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.GuessingRecord.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIssue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getHostteamid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getGuestteamid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getBetdate();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = this.getBetarea();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getBettimes();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = this.getBetcoin();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getGetcoin();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.GuessingRecord} The clone.
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.GuessingRecord} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string issue = 1;
 * @return {string}
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.getIssue = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.setIssue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 hostTeamId = 2;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.getHostteamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.setHostteamid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 guestTeamId = 3;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.getGuestteamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.setGuestteamid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 betDate = 4;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.getBetdate = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.setBetdate = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 betArea = 5;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.getBetarea = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.setBetarea = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float betTimes = 6;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.getBettimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.setBettimes = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 betCoin = 7;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.getBetcoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.setBetcoin = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 getCoin = 8;
 * @return {number}
 */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.getGetcoin = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.GuessingRecord.prototype.setGetcoin = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kzgame.svrcli.msg.Res_GuessingRecord.repeatedFields_, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Res_GuessingRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Res_GuessingRecord.displayName = 'proto.kzgame.svrcli.msg.Res_GuessingRecord';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Res_GuessingRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Res_GuessingRecord} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    guessingrecordsList: jspb.Message.toObjectList(msg.getGuessingrecordsList(),
    proto.kzgame.svrcli.msg.GuessingRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Res_GuessingRecord}
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Res_GuessingRecord;
  return proto.kzgame.svrcli.msg.Res_GuessingRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Res_GuessingRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Res_GuessingRecord}
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kzgame.svrcli.msg.GuessingRecord;
      reader.readMessage(value,proto.kzgame.svrcli.msg.GuessingRecord.deserializeBinaryFromReader);
      msg.getGuessingrecordsList().push(value);
      msg.setGuessingrecordsList(msg.getGuessingrecordsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Res_GuessingRecord} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGuessingrecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kzgame.svrcli.msg.GuessingRecord.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Res_GuessingRecord} The clone.
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Res_GuessingRecord} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated GuessingRecord guessingRecords = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.kzgame.svrcli.msg.GuessingRecord>}
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord.prototype.getGuessingrecordsList = function() {
  return /** @type{!Array.<!proto.kzgame.svrcli.msg.GuessingRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kzgame.svrcli.msg.GuessingRecord, 1));
};


/** @param {Array.<!proto.kzgame.svrcli.msg.GuessingRecord>} value  */
proto.kzgame.svrcli.msg.Res_GuessingRecord.prototype.setGuessingrecordsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.kzgame.svrcli.msg.Res_GuessingRecord.prototype.clearGuessingrecordsList = function() {
  this.setGuessingrecordsList([]);
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Res_GuessingRecord.Type = {
  UNSET: 0,
  ID: 20005
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Ask_VirtualHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Ask_VirtualHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Ask_VirtualHistory.displayName = 'proto.kzgame.svrcli.msg.Ask_VirtualHistory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Ask_VirtualHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Ask_VirtualHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Ask_VirtualHistory} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Ask_VirtualHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: msg.getPage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Ask_VirtualHistory}
 */
proto.kzgame.svrcli.msg.Ask_VirtualHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Ask_VirtualHistory;
  return proto.kzgame.svrcli.msg.Ask_VirtualHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Ask_VirtualHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Ask_VirtualHistory}
 */
proto.kzgame.svrcli.msg.Ask_VirtualHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Ask_VirtualHistory} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Ask_VirtualHistory.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Ask_VirtualHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Ask_VirtualHistory.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Ask_VirtualHistory} The clone.
 */
proto.kzgame.svrcli.msg.Ask_VirtualHistory.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Ask_VirtualHistory} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.kzgame.svrcli.msg.Ask_VirtualHistory.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.Ask_VirtualHistory.prototype.setPage = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Ask_VirtualHistory.Type = {
  UNSET: 0,
  ID: 20006
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.VirtualHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.VirtualHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.VirtualHistory.displayName = 'proto.kzgame.svrcli.msg.VirtualHistory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.VirtualHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.VirtualHistory} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.VirtualHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    issue: msg.getIssue(),
    hostteamid: msg.getHostteamid(),
    hostteamgoal: msg.getHostteamgoal(),
    guestteamid: msg.getGuestteamid(),
    guestteamgoal: msg.getGuestteamgoal()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.VirtualHistory}
 */
proto.kzgame.svrcli.msg.VirtualHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.VirtualHistory;
  return proto.kzgame.svrcli.msg.VirtualHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.VirtualHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.VirtualHistory}
 */
proto.kzgame.svrcli.msg.VirtualHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostteamid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHostteamgoal(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuestteamid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGuestteamgoal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.VirtualHistory} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.VirtualHistory.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIssue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getHostteamid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getHostteamgoal();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getGuestteamid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getGuestteamgoal();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.VirtualHistory} The clone.
 */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.VirtualHistory} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string issue = 1;
 * @return {string}
 */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.getIssue = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.setIssue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 hostTeamId = 2;
 * @return {number}
 */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.getHostteamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.setHostteamid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 hostTeamGoal = 3;
 * @return {number}
 */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.getHostteamgoal = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.setHostteamgoal = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 guestTeamId = 4;
 * @return {number}
 */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.getGuestteamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.setGuestteamid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 guestTeamGoal = 5;
 * @return {number}
 */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.getGuestteamgoal = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.VirtualHistory.prototype.setGuestteamgoal = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kzgame.svrcli.msg.Res_VirtualHistory.repeatedFields_, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Res_VirtualHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Res_VirtualHistory.displayName = 'proto.kzgame.svrcli.msg.Res_VirtualHistory';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Res_VirtualHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Res_VirtualHistory} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    virtualhistoryList: jspb.Message.toObjectList(msg.getVirtualhistoryList(),
    proto.kzgame.svrcli.msg.VirtualHistory.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Res_VirtualHistory}
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Res_VirtualHistory;
  return proto.kzgame.svrcli.msg.Res_VirtualHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Res_VirtualHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Res_VirtualHistory}
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kzgame.svrcli.msg.VirtualHistory;
      reader.readMessage(value,proto.kzgame.svrcli.msg.VirtualHistory.deserializeBinaryFromReader);
      msg.getVirtualhistoryList().push(value);
      msg.setVirtualhistoryList(msg.getVirtualhistoryList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Res_VirtualHistory} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getVirtualhistoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.kzgame.svrcli.msg.VirtualHistory.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Res_VirtualHistory} The clone.
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Res_VirtualHistory} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated VirtualHistory virtualHistory = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.kzgame.svrcli.msg.VirtualHistory>}
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory.prototype.getVirtualhistoryList = function() {
  return /** @type{!Array.<!proto.kzgame.svrcli.msg.VirtualHistory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.kzgame.svrcli.msg.VirtualHistory, 1));
};


/** @param {Array.<!proto.kzgame.svrcli.msg.VirtualHistory>} value  */
proto.kzgame.svrcli.msg.Res_VirtualHistory.prototype.setVirtualhistoryList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.kzgame.svrcli.msg.Res_VirtualHistory.prototype.clearVirtualhistoryList = function() {
  this.setVirtualhistoryList([]);
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Res_VirtualHistory.Type = {
  UNSET: 0,
  ID: 20007
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Ask_VirtualBet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Ask_VirtualBet.displayName = 'proto.kzgame.svrcli.msg.Ask_VirtualBet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Ask_VirtualBet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Ask_VirtualBet} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet.toObject = function(includeInstance, msg) {
  var f, obj = {
    betarea: msg.getBetarea(),
    coinitem: msg.getCoinitem()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Ask_VirtualBet}
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Ask_VirtualBet;
  return proto.kzgame.svrcli.msg.Ask_VirtualBet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Ask_VirtualBet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Ask_VirtualBet}
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBetarea(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCoinitem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Ask_VirtualBet} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBetarea();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getCoinitem();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Ask_VirtualBet} The clone.
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Ask_VirtualBet} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 betArea = 1;
 * @return {number}
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet.prototype.getBetarea = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.Ask_VirtualBet.prototype.setBetarea = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 coinItem = 2;
 * @return {number}
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet.prototype.getCoinitem = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.Ask_VirtualBet.prototype.setCoinitem = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Ask_VirtualBet.Type = {
  UNSET: 0,
  ID: 20008
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kzgame.svrcli.msg.Res_VirtualBet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kzgame.svrcli.msg.Res_VirtualBet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kzgame.svrcli.msg.Res_VirtualBet.displayName = 'proto.kzgame.svrcli.msg.Res_VirtualBet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Res_VirtualBet.prototype.toObject = function(opt_includeInstance) {
  return proto.kzgame.svrcli.msg.Res_VirtualBet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kzgame.svrcli.msg.Res_VirtualBet} msg The msg instance to transform.
 * @return {!Object}
 */
proto.kzgame.svrcli.msg.Res_VirtualBet.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: msg.getResult()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kzgame.svrcli.msg.Res_VirtualBet}
 */
proto.kzgame.svrcli.msg.Res_VirtualBet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kzgame.svrcli.msg.Res_VirtualBet;
  return proto.kzgame.svrcli.msg.Res_VirtualBet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kzgame.svrcli.msg.Res_VirtualBet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kzgame.svrcli.msg.Res_VirtualBet}
 */
proto.kzgame.svrcli.msg.Res_VirtualBet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.kzgame.svrcli.msg.Res_VirtualBet} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Res_VirtualBet.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kzgame.svrcli.msg.Res_VirtualBet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.kzgame.svrcli.msg.Res_VirtualBet.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.kzgame.svrcli.msg.Res_VirtualBet} The clone.
 */
proto.kzgame.svrcli.msg.Res_VirtualBet.prototype.cloneMessage = function() {
  return /** @type {!proto.kzgame.svrcli.msg.Res_VirtualBet} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 result = 1;
 * @return {number}
 */
proto.kzgame.svrcli.msg.Res_VirtualBet.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.kzgame.svrcli.msg.Res_VirtualBet.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.kzgame.svrcli.msg.Res_VirtualBet.Type = {
  UNSET: 0,
  ID: 20009
};

goog.object.extend(exports, proto.kzgame.svrcli.msg);
