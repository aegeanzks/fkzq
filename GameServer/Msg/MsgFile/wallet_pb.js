/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pb.wallet.AddTrade', null, global);
goog.exportSymbol('proto.pb.wallet.GetTrades', null, global);
goog.exportSymbol('proto.pb.wallet.GetUserBalance', null, global);
goog.exportSymbol('proto.pb.wallet.NsqAddTrade', null, global);
goog.exportSymbol('proto.pb.wallet.RspAddTrade', null, global);
goog.exportSymbol('proto.pb.wallet.RspCommon', null, global);
goog.exportSymbol('proto.pb.wallet.RspGetTrades', null, global);
goog.exportSymbol('proto.pb.wallet.RspGetUserBalance', null, global);
goog.exportSymbol('proto.pb.wallet.Trade', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.wallet.RspCommon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.wallet.RspCommon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.wallet.RspCommon.displayName = 'proto.pb.wallet.RspCommon';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.wallet.RspCommon.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.wallet.RspCommon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.wallet.RspCommon} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.wallet.RspCommon.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: msg.getRet(),
    msg: msg.getMsg()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.wallet.RspCommon}
 */
proto.pb.wallet.RspCommon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.wallet.RspCommon;
  return proto.pb.wallet.RspCommon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.wallet.RspCommon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.wallet.RspCommon}
 */
proto.pb.wallet.RspCommon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.wallet.RspCommon} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.RspCommon.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.wallet.RspCommon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.RspCommon.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRet();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.wallet.RspCommon} The clone.
 */
proto.pb.wallet.RspCommon.prototype.cloneMessage = function() {
  return /** @type {!proto.pb.wallet.RspCommon} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 ret = 1;
 * @return {number}
 */
proto.pb.wallet.RspCommon.prototype.getRet = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb.wallet.RspCommon.prototype.setRet = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.pb.wallet.RspCommon.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pb.wallet.RspCommon.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.wallet.AddTrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.wallet.AddTrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.wallet.AddTrade.displayName = 'proto.pb.wallet.AddTrade';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.wallet.AddTrade.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.wallet.AddTrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.wallet.AddTrade} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.wallet.AddTrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    outTradeNo: msg.getOutTradeNo(),
    type: msg.getType(),
    outType: msg.getOutType(),
    userId: msg.getUserId(),
    money: msg.getMoney(),
    moneyFrom: msg.getMoneyFrom(),
    memo: msg.getMemo()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.wallet.AddTrade}
 */
proto.pb.wallet.AddTrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.wallet.AddTrade;
  return proto.pb.wallet.AddTrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.wallet.AddTrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.wallet.AddTrade}
 */
proto.pb.wallet.AddTrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutTradeNo(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMoney(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMoneyFrom(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.wallet.AddTrade} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.AddTrade.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.wallet.AddTrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.AddTrade.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOutTradeNo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getOutType();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getMoney();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getMoneyFrom();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getMemo();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.wallet.AddTrade} The clone.
 */
proto.pb.wallet.AddTrade.prototype.cloneMessage = function() {
  return /** @type {!proto.pb.wallet.AddTrade} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string out_trade_no = 1;
 * @return {string}
 */
proto.pb.wallet.AddTrade.prototype.getOutTradeNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.pb.wallet.AddTrade.prototype.setOutTradeNo = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 type = 2;
 * @return {number}
 */
proto.pb.wallet.AddTrade.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.pb.wallet.AddTrade.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 out_type = 3;
 * @return {number}
 */
proto.pb.wallet.AddTrade.prototype.getOutType = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.pb.wallet.AddTrade.prototype.setOutType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 user_id = 4;
 * @return {number}
 */
proto.pb.wallet.AddTrade.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.pb.wallet.AddTrade.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string money = 5;
 * @return {string}
 */
proto.pb.wallet.AddTrade.prototype.getMoney = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.pb.wallet.AddTrade.prototype.setMoney = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 money_from = 6;
 * @return {number}
 */
proto.pb.wallet.AddTrade.prototype.getMoneyFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.pb.wallet.AddTrade.prototype.setMoneyFrom = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string memo = 7;
 * @return {string}
 */
proto.pb.wallet.AddTrade.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.pb.wallet.AddTrade.prototype.setMemo = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.wallet.RspAddTrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.wallet.RspAddTrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.wallet.RspAddTrade.displayName = 'proto.pb.wallet.RspAddTrade';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.wallet.RspAddTrade.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.wallet.RspAddTrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.wallet.RspAddTrade} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.wallet.RspAddTrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: msg.getRet(),
    msg: msg.getMsg(),
    tradeNo: msg.getTradeNo(),
    balance: msg.getBalance()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.wallet.RspAddTrade}
 */
proto.pb.wallet.RspAddTrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.wallet.RspAddTrade;
  return proto.pb.wallet.RspAddTrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.wallet.RspAddTrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.wallet.RspAddTrade}
 */
proto.pb.wallet.RspAddTrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeNo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.wallet.RspAddTrade} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.RspAddTrade.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.wallet.RspAddTrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.RspAddTrade.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRet();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTradeNo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getBalance();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.wallet.RspAddTrade} The clone.
 */
proto.pb.wallet.RspAddTrade.prototype.cloneMessage = function() {
  return /** @type {!proto.pb.wallet.RspAddTrade} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 ret = 1;
 * @return {number}
 */
proto.pb.wallet.RspAddTrade.prototype.getRet = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb.wallet.RspAddTrade.prototype.setRet = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.pb.wallet.RspAddTrade.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pb.wallet.RspAddTrade.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string trade_no = 3;
 * @return {string}
 */
proto.pb.wallet.RspAddTrade.prototype.getTradeNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.pb.wallet.RspAddTrade.prototype.setTradeNo = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string balance = 4;
 * @return {string}
 */
proto.pb.wallet.RspAddTrade.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.pb.wallet.RspAddTrade.prototype.setBalance = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.wallet.GetUserBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.wallet.GetUserBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.wallet.GetUserBalance.displayName = 'proto.pb.wallet.GetUserBalance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.wallet.GetUserBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.wallet.GetUserBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.wallet.GetUserBalance} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.wallet.GetUserBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: msg.getUserId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.wallet.GetUserBalance}
 */
proto.pb.wallet.GetUserBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.wallet.GetUserBalance;
  return proto.pb.wallet.GetUserBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.wallet.GetUserBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.wallet.GetUserBalance}
 */
proto.pb.wallet.GetUserBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.wallet.GetUserBalance} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.GetUserBalance.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.wallet.GetUserBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.GetUserBalance.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.wallet.GetUserBalance} The clone.
 */
proto.pb.wallet.GetUserBalance.prototype.cloneMessage = function() {
  return /** @type {!proto.pb.wallet.GetUserBalance} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 user_id = 1;
 * @return {number}
 */
proto.pb.wallet.GetUserBalance.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb.wallet.GetUserBalance.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.wallet.RspGetUserBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.wallet.RspGetUserBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.wallet.RspGetUserBalance.displayName = 'proto.pb.wallet.RspGetUserBalance';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.wallet.RspGetUserBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.wallet.RspGetUserBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.wallet.RspGetUserBalance} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.wallet.RspGetUserBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: msg.getRet(),
    msg: msg.getMsg(),
    balance: msg.getBalance()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.wallet.RspGetUserBalance}
 */
proto.pb.wallet.RspGetUserBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.wallet.RspGetUserBalance;
  return proto.pb.wallet.RspGetUserBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.wallet.RspGetUserBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.wallet.RspGetUserBalance}
 */
proto.pb.wallet.RspGetUserBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.wallet.RspGetUserBalance} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.RspGetUserBalance.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.wallet.RspGetUserBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.RspGetUserBalance.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRet();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getBalance();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.wallet.RspGetUserBalance} The clone.
 */
proto.pb.wallet.RspGetUserBalance.prototype.cloneMessage = function() {
  return /** @type {!proto.pb.wallet.RspGetUserBalance} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 ret = 1;
 * @return {number}
 */
proto.pb.wallet.RspGetUserBalance.prototype.getRet = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb.wallet.RspGetUserBalance.prototype.setRet = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.pb.wallet.RspGetUserBalance.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pb.wallet.RspGetUserBalance.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string balance = 3;
 * @return {string}
 */
proto.pb.wallet.RspGetUserBalance.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.pb.wallet.RspGetUserBalance.prototype.setBalance = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.wallet.GetTrades = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.wallet.GetTrades, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.wallet.GetTrades.displayName = 'proto.pb.wallet.GetTrades';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.wallet.GetTrades.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.wallet.GetTrades.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.wallet.GetTrades} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.wallet.GetTrades.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradeNo: msg.getTradeNo(),
    outTradeNo: msg.getOutTradeNo(),
    userId: msg.getUserId(),
    platformId: msg.getPlatformId(),
    type: msg.getType(),
    outType: msg.getOutType(),
    startTime: msg.getStartTime(),
    endTime: msg.getEndTime(),
    pageNum: msg.getPageNum(),
    curPage: msg.getCurPage()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.wallet.GetTrades}
 */
proto.pb.wallet.GetTrades.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.wallet.GetTrades;
  return proto.pb.wallet.GetTrades.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.wallet.GetTrades} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.wallet.GetTrades}
 */
proto.pb.wallet.GetTrades.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeNo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutTradeNo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlatformId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutType(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartTime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndTime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNum(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.wallet.GetTrades} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.GetTrades.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.wallet.GetTrades.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.GetTrades.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTradeNo();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getOutTradeNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getPlatformId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getType();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getOutType();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getStartTime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getEndTime();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getPageNum();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = this.getCurPage();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.wallet.GetTrades} The clone.
 */
proto.pb.wallet.GetTrades.prototype.cloneMessage = function() {
  return /** @type {!proto.pb.wallet.GetTrades} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string trade_no = 1;
 * @return {string}
 */
proto.pb.wallet.GetTrades.prototype.getTradeNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.pb.wallet.GetTrades.prototype.setTradeNo = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string out_trade_no = 2;
 * @return {string}
 */
proto.pb.wallet.GetTrades.prototype.getOutTradeNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pb.wallet.GetTrades.prototype.setOutTradeNo = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 user_id = 3;
 * @return {number}
 */
proto.pb.wallet.GetTrades.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.pb.wallet.GetTrades.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 platform_id = 4;
 * @return {number}
 */
proto.pb.wallet.GetTrades.prototype.getPlatformId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.pb.wallet.GetTrades.prototype.setPlatformId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 type = 5;
 * @return {number}
 */
proto.pb.wallet.GetTrades.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.pb.wallet.GetTrades.prototype.setType = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 out_type = 6;
 * @return {number}
 */
proto.pb.wallet.GetTrades.prototype.getOutType = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.pb.wallet.GetTrades.prototype.setOutType = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string start_time = 7;
 * @return {string}
 */
proto.pb.wallet.GetTrades.prototype.getStartTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.pb.wallet.GetTrades.prototype.setStartTime = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string end_time = 8;
 * @return {string}
 */
proto.pb.wallet.GetTrades.prototype.getEndTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.pb.wallet.GetTrades.prototype.setEndTime = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 page_num = 9;
 * @return {number}
 */
proto.pb.wallet.GetTrades.prototype.getPageNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.pb.wallet.GetTrades.prototype.setPageNum = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional int32 cur_page = 10;
 * @return {number}
 */
proto.pb.wallet.GetTrades.prototype.getCurPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.pb.wallet.GetTrades.prototype.setCurPage = function(value) {
  jspb.Message.setField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.wallet.RspGetTrades = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.wallet.RspGetTrades.repeatedFields_, null);
};
goog.inherits(proto.pb.wallet.RspGetTrades, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.wallet.RspGetTrades.displayName = 'proto.pb.wallet.RspGetTrades';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.wallet.RspGetTrades.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.wallet.RspGetTrades.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.wallet.RspGetTrades.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.wallet.RspGetTrades} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.wallet.RspGetTrades.toObject = function(includeInstance, msg) {
  var f, obj = {
    ret: msg.getRet(),
    msg: msg.getMsg(),
    count: msg.getCount(),
    listList: jspb.Message.toObjectList(msg.getListList(),
    proto.pb.wallet.Trade.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.wallet.RspGetTrades}
 */
proto.pb.wallet.RspGetTrades.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.wallet.RspGetTrades;
  return proto.pb.wallet.RspGetTrades.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.wallet.RspGetTrades} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.wallet.RspGetTrades}
 */
proto.pb.wallet.RspGetTrades.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRet(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 4:
      var value = new proto.pb.wallet.Trade;
      reader.readMessage(value,proto.pb.wallet.Trade.deserializeBinaryFromReader);
      msg.getListList().push(value);
      msg.setListList(msg.getListList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.wallet.RspGetTrades} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.RspGetTrades.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.wallet.RspGetTrades.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.RspGetTrades.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRet();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getMsg();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.pb.wallet.Trade.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.wallet.RspGetTrades} The clone.
 */
proto.pb.wallet.RspGetTrades.prototype.cloneMessage = function() {
  return /** @type {!proto.pb.wallet.RspGetTrades} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 ret = 1;
 * @return {number}
 */
proto.pb.wallet.RspGetTrades.prototype.getRet = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb.wallet.RspGetTrades.prototype.setRet = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string msg = 2;
 * @return {string}
 */
proto.pb.wallet.RspGetTrades.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pb.wallet.RspGetTrades.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 count = 3;
 * @return {number}
 */
proto.pb.wallet.RspGetTrades.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.pb.wallet.RspGetTrades.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated Trade list = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.pb.wallet.Trade>}
 */
proto.pb.wallet.RspGetTrades.prototype.getListList = function() {
  return /** @type{!Array.<!proto.pb.wallet.Trade>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pb.wallet.Trade, 4));
};


/** @param {Array.<!proto.pb.wallet.Trade>} value  */
proto.pb.wallet.RspGetTrades.prototype.setListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.pb.wallet.RspGetTrades.prototype.clearListList = function() {
  this.setListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.wallet.Trade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.wallet.Trade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.wallet.Trade.displayName = 'proto.pb.wallet.Trade';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.wallet.Trade.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.wallet.Trade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.wallet.Trade} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.wallet.Trade.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    tradeNo: msg.getTradeNo(),
    outTradeNo: msg.getOutTradeNo(),
    userId: msg.getUserId(),
    platformId: msg.getPlatformId(),
    type: msg.getType(),
    outType: msg.getOutType(),
    money: msg.getMoney(),
    moneyFrom: msg.getMoneyFrom(),
    balance: msg.getBalance(),
    memo: msg.getMemo(),
    createdTime: msg.getCreatedTime()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.wallet.Trade}
 */
proto.pb.wallet.Trade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.wallet.Trade;
  return proto.pb.wallet.Trade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.wallet.Trade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.wallet.Trade}
 */
proto.pb.wallet.Trade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeNo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutTradeNo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlatformId(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMoney(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMoneyFrom(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.wallet.Trade} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.Trade.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.wallet.Trade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.Trade.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getTradeNo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOutTradeNo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getUserId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getPlatformId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getType();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = this.getOutType();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = this.getMoney();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getMoneyFrom();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = this.getBalance();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getMemo();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getCreatedTime();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.wallet.Trade} The clone.
 */
proto.pb.wallet.Trade.prototype.cloneMessage = function() {
  return /** @type {!proto.pb.wallet.Trade} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pb.wallet.Trade.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb.wallet.Trade.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string trade_no = 2;
 * @return {string}
 */
proto.pb.wallet.Trade.prototype.getTradeNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.pb.wallet.Trade.prototype.setTradeNo = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string out_trade_no = 3;
 * @return {string}
 */
proto.pb.wallet.Trade.prototype.getOutTradeNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.pb.wallet.Trade.prototype.setOutTradeNo = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 user_id = 4;
 * @return {number}
 */
proto.pb.wallet.Trade.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.pb.wallet.Trade.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 platform_id = 5;
 * @return {number}
 */
proto.pb.wallet.Trade.prototype.getPlatformId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.pb.wallet.Trade.prototype.setPlatformId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int32 type = 6;
 * @return {number}
 */
proto.pb.wallet.Trade.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.pb.wallet.Trade.prototype.setType = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int32 out_type = 7;
 * @return {number}
 */
proto.pb.wallet.Trade.prototype.getOutType = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.pb.wallet.Trade.prototype.setOutType = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string money = 8;
 * @return {string}
 */
proto.pb.wallet.Trade.prototype.getMoney = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.pb.wallet.Trade.prototype.setMoney = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional int32 money_from = 9;
 * @return {number}
 */
proto.pb.wallet.Trade.prototype.getMoneyFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.pb.wallet.Trade.prototype.setMoneyFrom = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string balance = 10;
 * @return {string}
 */
proto.pb.wallet.Trade.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.pb.wallet.Trade.prototype.setBalance = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string memo = 11;
 * @return {string}
 */
proto.pb.wallet.Trade.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.pb.wallet.Trade.prototype.setMemo = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string created_time = 12;
 * @return {string}
 */
proto.pb.wallet.Trade.prototype.getCreatedTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/** @param {string} value  */
proto.pb.wallet.Trade.prototype.setCreatedTime = function(value) {
  jspb.Message.setField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.wallet.NsqAddTrade = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.wallet.NsqAddTrade, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.wallet.NsqAddTrade.displayName = 'proto.pb.wallet.NsqAddTrade';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.wallet.NsqAddTrade.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.wallet.NsqAddTrade.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.wallet.NsqAddTrade} msg The msg instance to transform.
 * @return {!Object}
 */
proto.pb.wallet.NsqAddTrade.toObject = function(includeInstance, msg) {
  var f, obj = {
    funcId: msg.getFuncId(),
    platformId: msg.getPlatformId(),
    tradeNo: msg.getTradeNo(),
    balance: msg.getBalance(),
    createdTime: msg.getCreatedTime(),
    trade: (f = msg.getTrade()) && proto.pb.wallet.AddTrade.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.wallet.NsqAddTrade}
 */
proto.pb.wallet.NsqAddTrade.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.wallet.NsqAddTrade;
  return proto.pb.wallet.NsqAddTrade.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.wallet.NsqAddTrade} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.wallet.NsqAddTrade}
 */
proto.pb.wallet.NsqAddTrade.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFuncId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlatformId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTradeNo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalance(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedTime(value);
      break;
    case 6:
      var value = new proto.pb.wallet.AddTrade;
      reader.readMessage(value,proto.pb.wallet.AddTrade.deserializeBinaryFromReader);
      msg.setTrade(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.pb.wallet.NsqAddTrade} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.NsqAddTrade.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.wallet.NsqAddTrade.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.pb.wallet.NsqAddTrade.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFuncId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getPlatformId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getTradeNo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getBalance();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getCreatedTime();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getTrade();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.pb.wallet.AddTrade.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.pb.wallet.NsqAddTrade} The clone.
 */
proto.pb.wallet.NsqAddTrade.prototype.cloneMessage = function() {
  return /** @type {!proto.pb.wallet.NsqAddTrade} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 func_id = 1;
 * @return {number}
 */
proto.pb.wallet.NsqAddTrade.prototype.getFuncId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.pb.wallet.NsqAddTrade.prototype.setFuncId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 platform_id = 2;
 * @return {number}
 */
proto.pb.wallet.NsqAddTrade.prototype.getPlatformId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.pb.wallet.NsqAddTrade.prototype.setPlatformId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string trade_no = 3;
 * @return {string}
 */
proto.pb.wallet.NsqAddTrade.prototype.getTradeNo = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.pb.wallet.NsqAddTrade.prototype.setTradeNo = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string balance = 4;
 * @return {string}
 */
proto.pb.wallet.NsqAddTrade.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.pb.wallet.NsqAddTrade.prototype.setBalance = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string created_time = 5;
 * @return {string}
 */
proto.pb.wallet.NsqAddTrade.prototype.getCreatedTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.pb.wallet.NsqAddTrade.prototype.setCreatedTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional AddTrade trade = 6;
 * @return {proto.pb.wallet.AddTrade}
 */
proto.pb.wallet.NsqAddTrade.prototype.getTrade = function() {
  return /** @type{proto.pb.wallet.AddTrade} */ (
    jspb.Message.getWrapperField(this, proto.pb.wallet.AddTrade, 6));
};


/** @param {proto.pb.wallet.AddTrade|undefined} value  */
proto.pb.wallet.NsqAddTrade.prototype.setTrade = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.pb.wallet.NsqAddTrade.prototype.clearTrade = function() {
  this.setTrade(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.pb.wallet.NsqAddTrade.prototype.hasTrade = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.pb.wallet);
